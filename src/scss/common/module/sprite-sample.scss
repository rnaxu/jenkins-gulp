/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$a-name: 'a';
$a-x: 66px;
$a-y: 0px;
$a-offset-x: -66px;
$a-offset-y: 0px;
$a-width: 38px;
$a-height: 49px;
$a-total-width: 139px;
$a-total-height: 130px;
$a-image: '../img/sprite-sample.png';
$a: (66px, 0px, -66px, 0px, 38px, 49px, 139px, 130px, '../img/sprite-sample.png', 'a', );
$b-name: 'b';
$b-x: 109px;
$b-y: 0px;
$b-offset-x: -109px;
$b-offset-y: 0px;
$b-width: 30px;
$b-height: 32px;
$b-total-width: 139px;
$b-total-height: 130px;
$b-image: '../img/sprite-sample.png';
$b: (109px, 0px, -109px, 0px, 30px, 32px, 139px, 130px, '../img/sprite-sample.png', 'b', );
$c-name: 'c';
$c-x: 66px;
$c-y: 54px;
$c-offset-x: -66px;
$c-offset-y: -54px;
$c-width: 32px;
$c-height: 53px;
$c-total-width: 139px;
$c-total-height: 130px;
$c-image: '../img/sprite-sample.png';
$c: (66px, 54px, -66px, -54px, 32px, 53px, 139px, 130px, '../img/sprite-sample.png', 'c', );
$n4-name: 'n4';
$n4-x: 0px;
$n4-y: 0px;
$n4-offset-x: 0px;
$n4-offset-y: 0px;
$n4-width: 61px;
$n4-height: 59px;
$n4-total-width: 139px;
$n4-total-height: 130px;
$n4-image: '../img/sprite-sample.png';
$n4: (0px, 0px, 0px, 0px, 61px, 59px, 139px, 130px, '../img/sprite-sample.png', 'n4', );
$n5-name: 'n5';
$n5-x: 0px;
$n5-y: 64px;
$n5-offset-x: 0px;
$n5-offset-y: -64px;
$n5-width: 54px;
$n5-height: 66px;
$n5-total-width: 139px;
$n5-total-height: 130px;
$n5-image: '../img/sprite-sample.png';
$n5: (0px, 64px, 0px, -64px, 54px, 66px, 139px, 130px, '../img/sprite-sample.png', 'n5', );
$spritesheet-width: 139px;
$spritesheet-height: 130px;
$spritesheet-image: '../img/sprite-sample.png';
$spritesheet-sprites: ($a, $b, $c, $n4, $n5, );
$spritesheet: (139px, 130px, '../img/sprite-sample.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
